"use client";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import { Badge } from "~/components/ui/badge";
import { ArrowRightLeft } from "lucide-react";

interface SelectedAsset {
  id: string;
  type: "player" | "pick";
  fromTeam: string;
  toTeam: string;
  data: {
    name?: string;
    salary?: number;
    year?: number;
    round?: string;
  };
}

interface TradeResultsTabProps {
  isGeneratingTrades: boolean;
  generatedTrades: any[];
  getTeamName: (teamId: string) => string;
  formatSalary: (salary: number) => string;
}

export default function TradeResultsTab({
  isGeneratingTrades,
  generatedTrades,
  getTeamName,
  formatSalary,
}: TradeResultsTabProps) {
  return (
    <div className="pt-0">
      {isGeneratingTrades ? (
        <div className="flex flex-col items-center justify-center space-y-4 py-12">
          <div className="h-12 w-12 animate-spin rounded-full border-b-2 border-blue-500"></div>
          <div className="text-center">
            <h3 className="mb-2 text-lg font-medium text-white">
              Generating AI Trade Scenarios
            </h3>
            <p className="text-gray-300">
              Our AI is analyzing the player and creating realistic trade
              options...
            </p>
          </div>
        </div>
      ) : generatedTrades.length > 0 ? (
        <div className="mt-4 space-y-4 md:space-y-6">
          {generatedTrades?.map((trade, index) => (
            <Card
              key={index}
              className="overflow-hidden border-gray-700 bg-gray-800 p-0"
            >
              <CardHeader className="bg-gray-700 px-3 py-3 md:px-6 md:pb-2">
                <CardTitle className="flex flex-row items-center gap-2 text-base text-white md:text-lg">
                  <ArrowRightLeft className="h-5 w-5" />
                  {trade.isOpenAIGenerated ? (
                    <>
                      Trade Scenario {index + 1}{" "}
                      <Badge className="ml-2 bg-green-600">AI Generated</Badge>
                    </>
                  ) : (
                    <>
                      {trade.teams?.length || 2}-Team Trade{" "}
                      {trade.isAutoGenerated ? "(Auto-Generated)" : ""}
                    </>
                  )}
                </CardTitle>
                <CardDescription className="text-gray-300">
                  {trade.isOpenAIGenerated ? (
                    <>
                      {trade.teams && trade.teams.length > 0
                        ? `${trade.teams.length}-Team Trade • ${trade.source}`
                        : `Trade with ${trade.tradingPartner} • ${trade.source}`}
                    </>
                  ) : (
                    <>{trade.totalAssets} total assets involved</>
                  )}
                </CardDescription>
              </CardHeader>
              <CardContent className="px-3 pt-3 md:px-6 md:pt-4">
                {trade.isOpenAIGenerated ? (
                  <div className="space-y-4">
                    {/* Multi-team trade display */}
                    {trade.teams && trade.teams.length > 0 ? (
                      <>
                        <div className="grid grid-cols-1 gap-3 md:grid-cols-2 md:gap-4 lg:grid-cols-3">
                          {trade.teams.map((team: any, teamIdx: number) => (
                            <div
                              key={teamIdx}
                              className="rounded-md border border-gray-600 bg-gray-700 p-3 md:p-4"
                            >
                              <h4 className="mb-2 border-b border-gray-600 pb-1 text-sm font-medium text-blue-400 md:mb-3 md:text-base">
                                {team.teamName}
                              </h4>

                              {/* What team gives */}
                              {team.gives && team.gives.length > 0 && (
                                <div className="mb-2 md:mb-3">
                                  <h5 className="mb-1 text-xs font-medium text-red-300 md:text-sm">
                                    Sends:
                                  </h5>
                                  <div className="space-y-0.5 md:space-y-1">
                                    {team.gives.map(
                                      (asset: string, idx: number) => (
                                        <div
                                          key={idx}
                                          className="text-xs leading-relaxed text-white md:text-sm"
                                        >
                                          {asset}
                                        </div>
                                      ),
                                    )}
                                  </div>
                                </div>
                              )}

                              {/* What team receives */}
                              {team.receives && team.receives.length > 0 && (
                                <div className="mb-2 md:mb-3">
                                  <h5 className="mb-1 text-xs font-medium text-green-300 md:text-sm">
                                    Receives:
                                  </h5>
                                  <div className="space-y-0.5 md:space-y-1">
                                    {team.receives.map(
                                      (asset: string, idx: number) => (
                                        <div
                                          key={idx}
                                          className="text-xs leading-relaxed text-white md:text-sm"
                                        >
                                          {asset}
                                        </div>
                                      ),
                                    )}
                                  </div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                        <div className="mb-4 rounded-md border border-blue-600 bg-blue-900/20 p-3 md:p-4">
                          <h4 className="mb-2 text-sm font-medium text-blue-300 md:text-base">
                            Trade Analysis
                          </h4>
                          <p className="mb-2 text-xs leading-relaxed text-gray-300 md:text-sm">
                            {trade.explanation}
                          </p>
                          {trade.salaryMatch && (
                            <p className="text-xs text-gray-400">
                              Salary Info: {trade.salaryMatch}
                            </p>
                          )}
                        </div>
                      </>
                    ) : (
                      /* Fallback to legacy 2-team display */
                      <>
                        <div className="grid grid-cols-1 gap-3 md:grid-cols-2 md:gap-4">
                          <div className="rounded-md border border-red-600 bg-red-900/20 p-3 md:p-4">
                            <h4 className="mb-2 text-sm font-medium text-red-300 md:text-base">
                              Player Traded
                            </h4>
                            <div className="space-y-0.5 md:space-y-1">
                              {trade.playerGives.map(
                                (player: string, idx: number) => (
                                  <div
                                    key={idx}
                                    className="text-xs leading-relaxed text-white md:text-sm"
                                  >
                                    {player}
                                  </div>
                                ),
                              )}
                            </div>
                          </div>
                          <div className="rounded-md border border-green-600 bg-green-900/20 p-3 md:p-4">
                            <h4 className="mb-2 text-sm font-medium text-green-300 md:text-base">
                              Assets Received
                            </h4>
                            <div className="space-y-0.5 md:space-y-1">
                              {trade.playerReceives.map(
                                (asset: string, idx: number) => (
                                  <div
                                    key={idx}
                                    className="text-xs leading-relaxed text-white md:text-sm"
                                  >
                                    {asset}
                                  </div>
                                ),
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="rounded-md border border-blue-600 bg-blue-900/20 p-3 md:p-4">
                          <h4 className="mb-2 text-sm font-medium text-blue-300 md:text-base">
                            Trade Analysis
                          </h4>
                          <p className="mb-2 text-xs leading-relaxed text-gray-300 md:text-sm">
                            {trade.explanation}
                          </p>
                          {trade.salaryMatch && (
                            <p className="text-xs text-gray-400">
                              Salary Info: {trade.salaryMatch}
                            </p>
                          )}
                        </div>
                      </>
                    )}
                  </div>
                ) : (
                  <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
                    {trade.teams?.map((teamId: string) => {
                      const teamTrade = trade.trades?.[teamId];

                      // If no teamTrade data, skip this team
                      if (!teamTrade) return null;
                      const outgoingSalary = (teamTrade.outgoing || [])
                        .filter(
                          (asset: SelectedAsset) => asset?.type === "player",
                        )
                        .reduce(
                          (sum: number, asset: SelectedAsset) =>
                            sum + (asset?.data?.salary ?? 0),
                          0,
                        );
                      const incomingSalary = (teamTrade.incoming || [])
                        .filter(
                          (asset: SelectedAsset) => asset?.type === "player",
                        )
                        .reduce(
                          (sum: number, asset: SelectedAsset) =>
                            sum + (asset?.data?.salary ?? 0),
                          0,
                        );

                      return (
                        <div
                          key={teamId}
                          className="rounded-md border border-gray-600 bg-gray-700 p-4"
                        >
                          <h4 className="mb-3 border-b border-gray-600 pb-1 font-medium text-blue-400">
                            {getTeamName(teamId)}
                          </h4>

                          {/* Outgoing Assets */}
                          {teamTrade.outgoing &&
                            teamTrade.outgoing.length > 0 && (
                              <div className="mb-3">
                                <h5 className="mb-1 text-sm font-medium text-red-300">
                                  Sends:
                                </h5>
                                <div className="space-y-1">
                                  {teamTrade.outgoing.map(
                                    (
                                      asset: SelectedAsset,
                                      assetIdx: number,
                                    ) => (
                                      <div
                                        key={asset?.id || assetIdx}
                                        className="text-sm"
                                      >
                                        <span className="text-white">
                                          {asset?.type === "player"
                                            ? asset?.data?.name ||
                                              "Unknown Player"
                                            : `${asset?.data?.year || "Unknown"} ${asset?.data?.round || "Round"} Pick`}
                                        </span>
                                        {asset?.toTeam && (
                                          <span className="ml-2 text-gray-400">
                                            → {getTeamName(asset.toTeam)}
                                          </span>
                                        )}
                                        {asset?.type === "player" && (
                                          <span className="ml-2 text-gray-400">
                                            (
                                            {formatSalary(
                                              asset?.data?.salary ?? 0,
                                            )}
                                            )
                                          </span>
                                        )}
                                      </div>
                                    ),
                                  )}
                                </div>
                              </div>
                            )}

                          {/* Incoming Assets */}
                          {teamTrade.incoming &&
                            teamTrade.incoming.length > 0 && (
                              <div className="mb-3">
                                <h5 className="mb-1 text-sm font-medium text-green-300">
                                  Receives:
                                </h5>
                                <div className="space-y-1">
                                  {teamTrade.incoming.map(
                                    (
                                      asset: SelectedAsset,
                                      assetIdx: number,
                                    ) => (
                                      <div
                                        key={asset?.id || assetIdx}
                                        className="text-sm"
                                      >
                                        <span className="text-white">
                                          {asset?.type === "player"
                                            ? asset?.data?.name ||
                                              "Unknown Player"
                                            : `${asset?.data?.year || "Unknown"} ${asset?.data?.round || "Round"} Pick`}
                                        </span>
                                        <span className="ml-2 text-gray-400">
                                          ← {getTeamName(asset?.fromTeam || "")}
                                        </span>
                                        {asset?.type === "player" && (
                                          <span className="ml-2 text-gray-400">
                                            (
                                            {formatSalary(
                                              asset?.data?.salary ?? 0,
                                            )}
                                            )
                                          </span>
                                        )}
                                      </div>
                                    ),
                                  )}
                                </div>
                              </div>
                            )}

                          {/* Salary Summary */}
                          {(outgoingSalary > 0 || incomingSalary > 0) && (
                            <div className="border-t border-gray-600 pt-2 text-xs text-gray-400">
                              <div>Out: {formatSalary(outgoingSalary)}</div>
                              <div>In: {formatSalary(incomingSalary)}</div>
                              <div
                                className={`font-medium ${
                                  incomingSalary - outgoingSalary >= 0
                                    ? "text-green-400"
                                    : "text-red-400"
                                }`}
                              >
                                Net:{" "}
                                {incomingSalary - outgoingSalary >= 0
                                  ? "+"
                                  : ""}
                                {formatSalary(incomingSalary - outgoingSalary)}
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center py-16">
          <div className="text-center">
            <h3 className="mb-2 text-lg font-medium text-white">
              No Trade Results Yet
            </h3>
            <p className="text-gray-400">
              Select players and click &quot;Generate AI Trades&quot; to see
              trade scenarios.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
